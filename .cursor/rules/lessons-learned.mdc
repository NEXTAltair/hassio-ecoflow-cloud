---
description: captures important patterns, preferences, and project intelligence, living document that grows smarter as progress happens
globs:
alwaysApply: false
---
---
description: Stores important patterns, preferences, and project intelligence, living document that grows smarter as progress happens
globs:
alwaysApply: true
---

# Lessons Learned & Project History

## プロジェクト概要

**EcoFlow Cloud Integration for Home Assistant** - EcoFlowデバイス用Home Assistantカスタムコンポーネント

- **技術スタック:** Python 3.12+, Home Assistant, MQTT, Protocol Buffers
- **主要機能:** EcoFlowデバイスの監視・制御、MQTT通信、多言語対応
- **対象デバイス:** DELTA/RIVERシリーズ、PowerStream、Glacier、Wave2等

## 開発パターンと教訓

### Home Assistantカスタムコンポーネント開発

#### エンティティ設計パターン
- **エンティティタイプ分離**: sensor.py, switch.py, number.py, select.py, button.pyで機能別に分離
- **一意性の確保**: `unique_id`の適切な設定でエンティティの重複を防止
- **状態管理**: 不要な更新を避け、効率的な状態同期を実現
- **可用性管理**: `available`プロパティでデバイス接続状態を適切に反映

#### 設定フロー実装
- **段階的設定**: ユーザーフレンドリーな設定ステップの設計
- **検証ロジック**: 入力値の適切な検証とエラーハンドリング
- **オプション管理**: 動的設定変更のためのオプションフロー
- **エラー表示**: 分かりやすいエラーメッセージの提供

### MQTT通信パターン

#### 接続管理
- **非同期処理**: すべてのMQTT操作を非同期で実装
- **再接続ロジック**: 接続断時の自動再接続機能
- **エラーハンドリング**: ネットワークエラーの適切な処理
- **認証管理**: EcoFlow固有の認証方式への対応

#### メッセージ処理
- **Protocol Buffers**: バイナリデータの効率的な処理
- **メッセージ形式**: EcoFlow固有のメッセージ構造への対応
- **データ変換**: デバイスデータからHome Assistantエンティティへの変換
- **状態同期**: リアルタイムでの状態更新

### EcoFlowデバイス管理

#### デバイス分類と実装
- **内部デバイス** (`devices/internal/`): 内部MQTT API使用、Protocol Buffers対応
- **公開デバイス** (`devices/public/`): 公開API使用、REST API対応
- **共通パターン**: ベースクラス継承による共通機能の実装
- **デバイス固有機能**: 各デバイスの特性に応じた個別実装

#### データマッピング戦略
- **センサーマッピング**: デバイスデータからセンサーエンティティへの変換
- **制御コマンド**: Home Assistantからデバイスへの制御指示
- **単位変換**: デバイス固有の単位からHome Assistant標準単位への変換
- **範囲制限**: デバイスの制約に応じた値の範囲制限

### 多言語対応とローカライゼーション

#### 翻訳管理
- **JSON構造**: 階層的な翻訳キー構造の設計
- **キー統一**: 一貫した翻訳キーの命名規則
- **完全性確保**: すべての表示文字列の翻訳提供
- **保守性**: 翻訳ファイルの管理しやすい構造

#### 言語サポート
- **対応言語**: de, en, fr, pl, pt-PT, uk_UA
- **フォールバック**: 未翻訳文字列の英語フォールバック
- **動的切り替え**: Home Assistantの言語設定に応じた動的切り替え

## 技術的な教訓

### Protocol Buffers処理

#### スキーマ管理
- **バージョン管理**: .protoファイルの適切なバージョン管理
- **後方互換性**: スキーマ変更時の後方互換性確保
- **生成ファイル**: protoc生成ファイルの適切な管理
- **エラーハンドリング**: デシリアライゼーションエラーの処理

#### パフォーマンス最適化
- **メモリ効率**: 大量データ処理時のメモリ使用量最適化
- **処理速度**: バイナリデータの高速処理
- **キャッシュ戦略**: 頻繁にアクセスするデータのキャッシュ

### 診断とデバッグ

#### 診断機能設計
- **診断データ**: 問題解決に役立つ詳細情報の収集
- **プライバシー保護**: 機密情報の適切な除外
- **サンプルデータ**: 開発・テスト用の診断サンプル
- **構造化**: 解析しやすい構造化された診断データ

#### ログ出力戦略
- **レベル分け**: 適切なログレベルの使用
- **コンテキスト**: 問題特定に役立つコンテキスト情報
- **パフォーマンス**: ログ出力のパフォーマンス影響最小化
- **構造化**: 機械的に解析可能な構造化ログ

### エラーハンドリングパターン

#### MQTT通信エラー
- **接続エラー**: ネットワーク接続問題の適切な処理
- **認証エラー**: 認証失敗時の分かりやすいエラーメッセージ
- **タイムアウト**: 通信タイムアウトの適切な処理
- **再試行ロジック**: 一時的な障害に対する再試行機能

#### デバイス通信エラー
- **デバイス未応答**: デバイスが応答しない場合の処理
- **データ形式エラー**: 予期しないデータ形式の処理
- **Protocol Buffersエラー**: デシリアライゼーション失敗の処理
- **状態不整合**: デバイス状態とHome Assistant状態の不整合処理

## 開発ワークフローの教訓

### 設定管理
- **環境分離**: 開発・テスト・本番環境の適切な分離
- **設定検証**: 設定値の妥当性検証
- **移行処理**: 設定スキーマ変更時の適切な移行
- **デフォルト値**: 適切なデフォルト値の設定

### テスト戦略
- **ユニットテスト**: 個別コンポーネントの機能テスト
- **統合テスト**: コンポーネント間の連携テスト
- **モックテスト**: 実デバイスに依存しないテスト
- **回帰テスト**: 既存機能の劣化防止

### ドキュメント管理
- **API仕様**: EcoFlow APIの仕様変更への対応
- **デバイス情報**: 新デバイス追加時のドキュメント更新
- **設定ガイド**: ユーザー向け設定ガイドの充実
- **開発者ガイド**: 開発者向けドキュメントの整備

## パフォーマンス最適化

### メモリ管理
- **データキャッシュ**: 頻繁にアクセスするデータのキャッシュ戦略
- **ガベージコレクション**: 不要なオブジェクトの適切な解放
- **メモリリーク**: メモリリークの検出と対策
- **リソース管理**: システムリソースの効率的な使用

### 通信最適化
- **接続プール**: MQTT接続の効率的な管理
- **バッチ処理**: 複数のコマンドをまとめて送信
- **圧縮**: データ圧縮による通信量削減
- **キューイング**: メッセージキューによる処理の平滑化

## 今後の改善点

### 機能拡張
- **新デバイス対応**: 新しいEcoFlowデバイスへの対応
- **機能追加**: ユーザーからの要望に基づく機能追加
- **API拡張**: EcoFlow APIの新機能への対応
- **統合強化**: 他のHome Assistantコンポーネントとの連携強化

### 品質向上
- **テストカバレッジ**: テストカバレッジの向上
- **エラーハンドリング**: より堅牢なエラーハンドリング
- **パフォーマンス**: 処理性能の向上
- **ユーザビリティ**: ユーザーエクスペリエンスの向上

---

## 記録開始

このプロジェクト固有の教訓と改善点をここに記録していく。

<!-- 新しい教訓はここに追加 -->
