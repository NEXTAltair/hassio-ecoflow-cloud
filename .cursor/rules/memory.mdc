---
description: ALWAYS INCLUDE to HAVE Project Context
globs:
alwaysApply: false
---
---
description: ALWAYS INCLUDE to HAVE Project Context.
globs:
alwaysApply: true
---
# メモリファイル構成と参照ルール (AI向け指示)

これは、ファイルシステム用いドキュメント化·メモリ維持行うための基本原則、必要ファイル、ワークフロー構成、重要手順まとめたもの。
メモリファイルは、必須コアファイルと任意コンテキストファイルで構成。ファイルは明確階層構造で積上げ。

```mermaid
flowchart TD
    PB[ [product_requirement_docs.md](mdc:docs_4ai/product_requirement_docs.md) ] --> PC[ [technical.md](mdc:docs_4ai/technical.md) ]
    PB --> SP[ [architecture.md](mdc:docs_4ai/architecture.md) ]

    SP --> TC[ [tasks_plan.md](mdc:tasks/tasks_plan.md) ]
    PC --> TC
    PB --> TC

    TC --> AC[ [active_context.md](mdc:tasks/active_context.md) ]

    AC --> ER[ [error-documentation.mdc](mdc:.cursor/rules/error-documentation.mdc)]
    AC --> LL[ [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc) ]

    subgraph LIT[ @docs_4ai/literature ]
        L1[...]
        L2[...]
    end

    subgraph RFC[ @tasks/rfc/ ]
        R1[...]
        R2[...]
    end

    PC --o LIT
    TC --o RFC
```

## 1. コアファイル(必須)

7ファイル:

1. [product_requirement_docs.md](mdc:docs_4ai/product_requirement_docs.md) (docs_4ai/product_requirement_docs.md): プロジェクトPRD(製品要求仕様書)/SOP。
   - プロジェクト存在理由
   - 解決問題
   - コア要件·目標定義
   - 他ファイル形成基礎文書
   - ここ記載ルールが何より優先ルール
   - 不存在時、プロジェクト開始時作成

2. [architecture.md](mdc:docs_4ai/architecture.md) (docs_4ai/architecture.md): システムアーキテクチャ
   - 動作方法
   - コンポーネント間関係
   - 依存関係
   - ソリューションワークフロー
   - Mermaidによるソリューション概要図:各コンポーネント·コードフロー

3. [technical.md](mdc:docs_4ai/technical.md) (docs_4ai/technical.md): 開発環境·スタック
   - 使用技術
   - 開発セットアップ
   - 主要技術決定
   - 使用中デザインパターン
   - 技術制約

4. [tasks_plan.md](mdc:tasks/tasks_plan.md) (tasks/tasks_plan.md): 詳細タスクバックログ

   - 詳細タスクリスト·進行状況
   - 完了事項
   - 残存構築作業
   - 現状
   - 既知問題点

5. [active_context.md](mdc:tasks/active_context.md) (tasks/active_context.md): 開発現状
   - 現作業焦点
   - 進行中決定·検討事項
   - 最近変更
   - 次ステップ

6. [error-documentation.mdc](mdc:.cursor/rules/error-documentation.mdc) (.cursor/rules/error-documentation.mdc):
   - プロジェクト中発見修正·再利用可能修正は @error-documentation.mdc に記録、同ミス繰返防止。
   - 既知問題:状態、背景、解決策

7. [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc) (.cursor/rules/lessons-learned.mdc): 各プロジェクト学習記録
   - 重要パターン、好み、プロジェクト知識収集
   - @lessons-learned.mdc に詳細記載


## 2. コンテキストファイル (任意)

- **`docs_4ai/literature/`**: 文献調査·研究記録用。
- **`tasks/rfc/`**: Request for Comments (RFC) 保存用。特定機能詳細仕様·議論。
- **追加コンテキスト:** 必要応じ `docs_4ai/` または `tasks/` に追加ファイル·フォルダ作成可 (統合仕様、テスト戦略、ベンチマーク等)。

## 3. ドキュメント参照ルール

### 3.1. 基本原則
- **ドキュメント参照義務化:** コード実装·変更時は、必ず関連ドキュメント参照。
- **参照順序 (推奨):**
  1.  `tasks/active_context.md` (現在の作業内容)
  2.  `tasks/tasks_plan.md` (タスク全体像)
  3.  `docs_4ai/architecture.md` (システム構造)
  4.  `docs_4ai/technical.md` (技術詳細)
  5.  `docs_4ai/product_requirement_docs.md` (プロジェクト目標･要件)
  6.  `.cursor/rules/lessons-learned.mdc` (過去の知見)
  7.  `.cursor/rules/error-documentation.mdc` (既知の問題)
  8.  `tasks/rfc/` (特定のRFC)
  9.  `docs_4ai/literature/` (関連研究)

### 3.2. ドキュメント参照チェックリスト
- [ ] 実装前に仕様書([product_requirement_docs.md](mdc:docs_4ai/product_requirement_docs.md))確認したか?
- [ ] 計画書([tasks_plan.md](mdc:tasks/tasks_plan.md))と実装内容整合しているか?
- [ ] アーキテクチャ([architecture.md](mdc:docs_4ai/architecture.md))に準拠しているか?
- [ ] 技術仕様([technical.md](mdc:docs_4ai/technical.md))に準拠しているか?
- [ ] 関連する過去の知見([lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc))やエラー([error-documentation.mdc](mdc:.cursor/rules/error-documentation.mdc))を参照したか?

## 4. ドキュメント更新ルール

### 4.1. 基本原則
- **ドキュメント更新義務化:** コード変更時は、関連ドキュメントも適切更新。

### 4.2. 更新タイミング
- コード変更時
- 仕様変更時
- 計画変更時
- 新パターン発見時
- 重要変更後
- ユーザーが**メモリファイル更新**依頼時(全コアファイルレビュー)
- コンテキスト明確化必要時
- 計画主要部分検証時

### 4.3. 更新内容
- 変更点詳細
- 変更理由
- 影響範囲
- 関連他ドキュメントへの影響

### 4.4. 更新プロセス (推奨)
```mermaid
flowchart TD
    Start[Update Process]

    subgraph Process
        P1[Review Core Files]
        P2[Document Current State in [active_context.md](mdc:tasks/active_context.md) and [tasks_plan.md](mdc:tasks/tasks_plan.md) ]
        P3[Clarify Next Steps and document in [tasks_plan.md](mdc:tasks/tasks_plan.md) ]
        P4[Update [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc), [error-documentation.mdc](mdc:.cursor/rules/error-documentation.mdc)]
        P5[Update [architecture.md](mdc:docs_4ai/architecture.md), [technical.md](mdc:docs_4ai/technical.md), [product_requirement_docs.md](mdc:docs_4ai/product_requirement_docs.md) as needed]

        P1 --> P2 --> P3 --> P4 --> P5
    end

    Start --> Process
```

注: **メモリファイル更新**発生時は、必ず全コアファイルレビュー。特に [active_context.md](mdc:tasks/active_context.md), [tasks_plan.md](mdc:tasks/tasks_plan.md), [architecture.md](mdc:docs_4ai/architecture.md) 重点チェック。

### 4.5. ドキュメント更新チェックリスト
- [ ] 関連ドキュメント更新したか?
- [ ] 更新ドキュメントは他ドキュメント同フォーマット記載か?
- [ ] ドキュメント間情報整合性確認したか?

## 5. プロジェクト情報: EcoFlow Cloud Home Assistant

### 5.1. プロジェクト概要
- **名前:** EcoFlow Cloud Integration for Home Assistant
- **目的:** EcoFlowデバイス用Home Assistantカスタムコンポーネント
- **技術:** Python 3.12+, Home Assistant, MQTT, Protocol Buffers
- **リポジトリ:** https://github.com/tolwi/hassio-ecoflow-cloud

### 5.2. アーキテクチャ概要
- **カスタムコンポーネント構造:** `custom_components/ecoflow_cloud/`
- **MQTT通信:** EcoFlow MQTT Broker (`mqtt.ecoflow.com`)
- **デバイス管理:** 複数のEcoFlowデバイスタイプサポート
- **データ処理:** Protocol Buffersによるバイナリデータ処理

### 5.3. 主要コンポーネント
- **エンティティ:** sensor.py, switch.py, number.py, select.py, button.py
- **API層:** api/ecoflow_mqtt.py, api/private_api.py, api/public_api.py
- **デバイス層:** devices/internal/, devices/public/
- **設定:** config_flow.py, manifest.json

### 5.4. 対象デバイス
- **DELTAシリーズ:** DELTA_2, DELTA_PRO, DELTA_MAX等
- **RIVERシリーズ:** RIVER_2, RIVER_MAX, RIVER_PRO等
- **その他:** PowerStream, Glacier, Wave2等

### 5.5. 開発パターン
- **Home Assistantカスタムコンポーネント開発**
  - manifest.json管理
  - config_flow実装
  - エンティティ定義
  - サービス登録
  - HACS対応

- **MQTT通信パターン**
  - EcoFlow MQTT接続
  - メッセージ処理
  - 認証・セキュリティ管理
  - 接続エラーハンドリング
  - 非同期処理

- **EcoFlowデバイス管理**
  - デバイス定義パターン
  - センサー/スイッチ実装
  - データマッピング手法
  - デバイス固有機能実装
  - 新デバイス追加手順

- **Protocol Buffers処理**
  - .protoファイル管理
  - メッセージ変換パターン
  - バイナリデータ処理
  - バージョン管理
  - パフォーマンス最適化

## 6. コアワークフロー (参考)

システムは明確モード動作:(PLAN/ACT)、別名(Architect/Code)。モードはユーザー入力/リクエスト内容決定。入力に「MODE = PLAN MODE / Architect MODE」や「MODE = ACT MODE / Code MODE」明示あればそれに従う。不明確時はモード質問。

### 6.1. PLANまたはArchitect MODE
```mermaid
flowchart TD
    Start[Start] --> ReadFiles[Read Memory Files ("docs_4ai/": (a)"docs_4ai/architecture.md" (b)"docs_4ai/product_requirement_docs.md" (c)"docs_4ai/technical.md". "tasks/" : (a)"tasks/active_context.md" (b)"tasks/tasks_plan.md". if needed further: "docs_4ai/literature" and "tasks/rfc") ]
    ReadFiles --> CheckFiles{Files Complete?}

    CheckFiles -->|No| Plan[Create Plan]
    Plan --> DocumentChat[Document in Chat]

    CheckFiles -->|Yes| VerifyContext[Verify Context]
    VerifyContext --> Strategy[Develop Strategy]
    Strategy --> Present[Present Approach]

    Present --> Verification{Approach Verified?}

    Verification -->|No| Clarify[Seek Clarification]
    Clarify --> Strategy[Develop Strategy]

    Verification -->|Yes| DocumentMemory[Document in Memory Files ("docs_4ai/": (a)"docs_4ai/architecture.md" (b)"docs_4ai/product_requirement_docs.md" (c)"docs_4ai/technical.md". "tasks/" : (a)"tasks/active_context.md" (b)"tasks/tasks_plan.md" if needed further: "docs_4ai/literature" and "tasks/rfc")]
```

### 6.2. ACTまたはCode MODE
```mermaid
flowchart TD
    Start[Start] --> Context[Check Memory Files (Core Files always ("docs_4ai/": (a)"docs_4ai/architecture.md" (b)"docs_4ai/product_requirement_docs.md" (c)"docs_4ai/technical.md". "tasks/" : (a)"tasks/active_context.md" (b)"tasks/tasks_plan.md"), rest based on context (if needed further: "docs_4ai/literature" and "tasks/rfc")) ]
    Context --> Update[Update Documentation]
    Update --> Rules[Update [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc), [error-documentation.mdc](mdc:.cursor/rules/error-documentation.mdc) if needed]
    Rules --> Execute[Execute Task]
    Execute --> Document[Document Changes in Memory Files ("docs_4ai/": (a)"docs_4ai/architecture.md" (b)"docs_4ai/product_requirement_docs.md" (c)"docs_4ai/technical.md". "tasks/" : (a)"tasks/active_context.md" (b)"tasks/tasks_plan.md" if needed further: "docs_4ai/literature" and "tasks/rfc") ]
```

# ドキュメント更新

メモリファイル更新は以下時発生。

1. 新パターン発見時
2. 重要変更後
3. ユーザーが**メモリファイル更新**依頼時(全コアファイルレビュー)
4. コンテキスト明確化必要時
5. 計画主要部分検証時

```mermaid
flowchart TD
    Start[Update Process]

    subgraph Process
        P1[Review Core Files]
        P2[Document Current State in [active_context.md](mdc:tasks/active_context.md) and [tasks_plan.md](mdc:tasks/tasks_plan.md) ]
        P3[Clarify Next Steps and document in [tasks_plan.md](mdc:tasks/tasks_plan.md) ]
        P4[Update [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc), [error-documentation.mdc](mdc:.cursor/rules/error-documentation.mdc)]
        P5 Update [ [architecture.md](mdc:docs_4ai/architecture.md) ]

        P1 --> P2 --> P3 --> P4
    end

    Start --> Process
```

注: **メモリファイル更新**発生時は、必ず全コアファイルレビュー。特に  [active_context.md](mdc:tasks/active_context.md)  [tasks_plan.md](mdc:tasks/tasks_plan.md)  [architecture.md](mdc:docs_4ai/architecture.md) 重点チェック。

# プロジェクト知識 ( [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc) [.cursor/rules/lessons-learned.mdc] )

[lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc) は各プロジェクト学習記録。
コードから見えない重要知見記録、今後作業効率化役立。

### 7.1. 学習プロセス
```mermaid
flowchart TD
    Start{Discover New Pattern}

    subgraph Learn [Learning Process]
        D1[Identify Pattern]
        D2[Validate with User]
        D3[Document in [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc) ]
    end

    subgraph Apply [Usage]
        A1[Read [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc) ]
        A2[Apply Learned Patterns]
        A3[Improve Future Work]
    end

    Start --> Learn
    Learn --> Apply
```

### 7.2. 記録事項
- 重要実装パス
- ユーザー好み·ワークフロー
- プロジェクト特有パターン
- 既知課題
- プロジェクト決定推移
- ツール使用パターン

フォーマット柔軟。効果的プロジェクト進行役立知見中心記録。@lessons-learned.md は作業が重なる毎賢く成長「生きたドキュメント」

## 8. 違反時対応

- **違反検出時:** 作業中断、ユーザー報告。
- **違反内容:**
  - ドキュメント未参照
  - ドキュメント未更新
  - ドキュメント間不整合
